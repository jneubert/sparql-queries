# Create a table of not-yet mapped ag entries for OpenRefine
# (ag = Historische LÃ¤nderklassifikation)
#
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX zbwext: <http://zbw.eu/namespaces/zbw-extensions/>
PREFIX schema: <http://schema.org/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX gndo: <https://d-nb.info/standards/elementset/gnd#>
#
select distinct ?broaderEn ?id (concat('gnd', max(?gndId)) as ?byGnd) ?labelDe ?labelEn (str(max(?note)) as ?noteDe) (group_concat( ?gndId; separator=' | ') as ?gndIds)
where {
  graph <http://zbw.eu/beta/geo/ng> {
    ?s skos:prefLabel ?labelLangEn ;
       dct:identifier ?id .
    filter(lang(?labelLangEn) = 'en')
    bind(str(?labelLangEn) as ?labelEn)
    ?s skos:prefLabel ?labelLangDe .
    filter(lang(?labelLangDe) = 'de')
    bind(str(?labelLangDe) as ?labelDe)
    #
    # gnd for indirect mapping
    optional {
      ?s gndo:gndIdentifier ?gndId .
    }
    # only entries with folders!
    filter(exists {
        { ?s zbwext:shFolderCount [] }
                union
        { ?s zbwext:waFolderCount [] }
      })

    # filter out existing entries in WD
    filter(not exists {
        ?s skos:exactMatch ?wd .
        filter(contains(str(?wd), 'wikidata'))
      }
    )
    ?broader skos:narrower ?s ;
             skos:prefLabel ?broaderLangEn .
    filter(lang(?broaderLangEn) = 'en')
    bind(str(?broaderLangEn) as ?broaderEn)
    optional {
      ?s skos:note ?note .
      filter(!contains(?note, 'FolderCount'))
    }
  }
}
group by ?id ?broaderEn ?labelDe ?labelEn
order by ?broaderEn ?id

